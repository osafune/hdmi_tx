// c4e_pcmplay_core_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 20.1 720

`timescale 1 ps / 1 ps
module c4e_pcmplay_core_mm_interconnect_1 (
		input  wire        peri_clk_clk_clk,                                    //                                  peri_clk_clk.clk
		input  wire        peripheral_bridge_reset_reset_bridge_in_reset_reset, // peripheral_bridge_reset_reset_bridge_in_reset.reset
		input  wire [8:0]  peripheral_bridge_m0_address,                        //                          peripheral_bridge_m0.address
		output wire        peripheral_bridge_m0_waitrequest,                    //                                              .waitrequest
		input  wire [0:0]  peripheral_bridge_m0_burstcount,                     //                                              .burstcount
		input  wire [3:0]  peripheral_bridge_m0_byteenable,                     //                                              .byteenable
		input  wire        peripheral_bridge_m0_read,                           //                                              .read
		output wire [31:0] peripheral_bridge_m0_readdata,                       //                                              .readdata
		output wire        peripheral_bridge_m0_readdatavalid,                  //                                              .readdatavalid
		input  wire        peripheral_bridge_m0_write,                          //                                              .write
		input  wire [31:0] peripheral_bridge_m0_writedata,                      //                                              .writedata
		input  wire        peripheral_bridge_m0_debugaccess,                    //                                              .debugaccess
		output wire [1:0]  barcolor_s1_address,                                 //                                   barcolor_s1.address
		output wire        barcolor_s1_write,                                   //                                              .write
		input  wire [31:0] barcolor_s1_readdata,                                //                                              .readdata
		output wire [31:0] barcolor_s1_writedata,                               //                                              .writedata
		output wire        barcolor_s1_chipselect,                              //                                              .chipselect
		output wire [1:0]  gpio_s1_address,                                     //                                       gpio_s1.address
		output wire        gpio_s1_write,                                       //                                              .write
		input  wire [31:0] gpio_s1_readdata,                                    //                                              .readdata
		output wire [31:0] gpio_s1_writedata,                                   //                                              .writedata
		output wire        gpio_s1_chipselect,                                  //                                              .chipselect
		output wire [0:0]  sysid_control_slave_address,                         //                           sysid_control_slave.address
		input  wire [31:0] sysid_control_slave_readdata,                        //                                              .readdata
		output wire [2:0]  systimer_s1_address,                                 //                                   systimer_s1.address
		output wire        systimer_s1_write,                                   //                                              .write
		input  wire [15:0] systimer_s1_readdata,                                //                                              .readdata
		output wire [15:0] systimer_s1_writedata,                               //                                              .writedata
		output wire        systimer_s1_chipselect,                              //                                              .chipselect
		output wire [2:0]  sysuart_s1_address,                                  //                                    sysuart_s1.address
		output wire        sysuart_s1_write,                                    //                                              .write
		output wire        sysuart_s1_read,                                     //                                              .read
		input  wire [15:0] sysuart_s1_readdata,                                 //                                              .readdata
		output wire [15:0] sysuart_s1_writedata,                                //                                              .writedata
		output wire        sysuart_s1_begintransfer,                            //                                              .begintransfer
		output wire        sysuart_s1_chipselect,                               //                                              .chipselect
		output wire [1:0]  vga_csr_address,                                     //                                       vga_csr.address
		output wire        vga_csr_write,                                       //                                              .write
		output wire        vga_csr_read,                                        //                                              .read
		input  wire [31:0] vga_csr_readdata,                                    //                                              .readdata
		output wire [31:0] vga_csr_writedata                                    //                                              .writedata
	);

	wire         peripheral_bridge_m0_translator_avalon_universal_master_0_waitrequest;   // peripheral_bridge_m0_agent:av_waitrequest -> peripheral_bridge_m0_translator:uav_waitrequest
	wire  [31:0] peripheral_bridge_m0_translator_avalon_universal_master_0_readdata;      // peripheral_bridge_m0_agent:av_readdata -> peripheral_bridge_m0_translator:uav_readdata
	wire         peripheral_bridge_m0_translator_avalon_universal_master_0_debugaccess;   // peripheral_bridge_m0_translator:uav_debugaccess -> peripheral_bridge_m0_agent:av_debugaccess
	wire   [8:0] peripheral_bridge_m0_translator_avalon_universal_master_0_address;       // peripheral_bridge_m0_translator:uav_address -> peripheral_bridge_m0_agent:av_address
	wire         peripheral_bridge_m0_translator_avalon_universal_master_0_read;          // peripheral_bridge_m0_translator:uav_read -> peripheral_bridge_m0_agent:av_read
	wire   [3:0] peripheral_bridge_m0_translator_avalon_universal_master_0_byteenable;    // peripheral_bridge_m0_translator:uav_byteenable -> peripheral_bridge_m0_agent:av_byteenable
	wire         peripheral_bridge_m0_translator_avalon_universal_master_0_readdatavalid; // peripheral_bridge_m0_agent:av_readdatavalid -> peripheral_bridge_m0_translator:uav_readdatavalid
	wire         peripheral_bridge_m0_translator_avalon_universal_master_0_lock;          // peripheral_bridge_m0_translator:uav_lock -> peripheral_bridge_m0_agent:av_lock
	wire         peripheral_bridge_m0_translator_avalon_universal_master_0_write;         // peripheral_bridge_m0_translator:uav_write -> peripheral_bridge_m0_agent:av_write
	wire  [31:0] peripheral_bridge_m0_translator_avalon_universal_master_0_writedata;     // peripheral_bridge_m0_translator:uav_writedata -> peripheral_bridge_m0_agent:av_writedata
	wire   [2:0] peripheral_bridge_m0_translator_avalon_universal_master_0_burstcount;    // peripheral_bridge_m0_translator:uav_burstcount -> peripheral_bridge_m0_agent:av_burstcount
	wire  [31:0] sysid_control_slave_agent_m0_readdata;                                   // sysid_control_slave_translator:uav_readdata -> sysid_control_slave_agent:m0_readdata
	wire         sysid_control_slave_agent_m0_waitrequest;                                // sysid_control_slave_translator:uav_waitrequest -> sysid_control_slave_agent:m0_waitrequest
	wire         sysid_control_slave_agent_m0_debugaccess;                                // sysid_control_slave_agent:m0_debugaccess -> sysid_control_slave_translator:uav_debugaccess
	wire   [8:0] sysid_control_slave_agent_m0_address;                                    // sysid_control_slave_agent:m0_address -> sysid_control_slave_translator:uav_address
	wire   [3:0] sysid_control_slave_agent_m0_byteenable;                                 // sysid_control_slave_agent:m0_byteenable -> sysid_control_slave_translator:uav_byteenable
	wire         sysid_control_slave_agent_m0_read;                                       // sysid_control_slave_agent:m0_read -> sysid_control_slave_translator:uav_read
	wire         sysid_control_slave_agent_m0_readdatavalid;                              // sysid_control_slave_translator:uav_readdatavalid -> sysid_control_slave_agent:m0_readdatavalid
	wire         sysid_control_slave_agent_m0_lock;                                       // sysid_control_slave_agent:m0_lock -> sysid_control_slave_translator:uav_lock
	wire  [31:0] sysid_control_slave_agent_m0_writedata;                                  // sysid_control_slave_agent:m0_writedata -> sysid_control_slave_translator:uav_writedata
	wire         sysid_control_slave_agent_m0_write;                                      // sysid_control_slave_agent:m0_write -> sysid_control_slave_translator:uav_write
	wire   [2:0] sysid_control_slave_agent_m0_burstcount;                                 // sysid_control_slave_agent:m0_burstcount -> sysid_control_slave_translator:uav_burstcount
	wire         sysid_control_slave_agent_rf_source_valid;                               // sysid_control_slave_agent:rf_source_valid -> sysid_control_slave_agent_rsp_fifo:in_valid
	wire  [83:0] sysid_control_slave_agent_rf_source_data;                                // sysid_control_slave_agent:rf_source_data -> sysid_control_slave_agent_rsp_fifo:in_data
	wire         sysid_control_slave_agent_rf_source_ready;                               // sysid_control_slave_agent_rsp_fifo:in_ready -> sysid_control_slave_agent:rf_source_ready
	wire         sysid_control_slave_agent_rf_source_startofpacket;                       // sysid_control_slave_agent:rf_source_startofpacket -> sysid_control_slave_agent_rsp_fifo:in_startofpacket
	wire         sysid_control_slave_agent_rf_source_endofpacket;                         // sysid_control_slave_agent:rf_source_endofpacket -> sysid_control_slave_agent_rsp_fifo:in_endofpacket
	wire         sysid_control_slave_agent_rsp_fifo_out_valid;                            // sysid_control_slave_agent_rsp_fifo:out_valid -> sysid_control_slave_agent:rf_sink_valid
	wire  [83:0] sysid_control_slave_agent_rsp_fifo_out_data;                             // sysid_control_slave_agent_rsp_fifo:out_data -> sysid_control_slave_agent:rf_sink_data
	wire         sysid_control_slave_agent_rsp_fifo_out_ready;                            // sysid_control_slave_agent:rf_sink_ready -> sysid_control_slave_agent_rsp_fifo:out_ready
	wire         sysid_control_slave_agent_rsp_fifo_out_startofpacket;                    // sysid_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_control_slave_agent:rf_sink_startofpacket
	wire         sysid_control_slave_agent_rsp_fifo_out_endofpacket;                      // sysid_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_control_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_src_valid;                                                       // cmd_mux:src_valid -> sysid_control_slave_agent:cp_valid
	wire  [82:0] cmd_mux_src_data;                                                        // cmd_mux:src_data -> sysid_control_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                       // sysid_control_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [5:0] cmd_mux_src_channel;                                                     // cmd_mux:src_channel -> sysid_control_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                               // cmd_mux:src_startofpacket -> sysid_control_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                 // cmd_mux:src_endofpacket -> sysid_control_slave_agent:cp_endofpacket
	wire  [31:0] vga_csr_agent_m0_readdata;                                               // vga_csr_translator:uav_readdata -> vga_csr_agent:m0_readdata
	wire         vga_csr_agent_m0_waitrequest;                                            // vga_csr_translator:uav_waitrequest -> vga_csr_agent:m0_waitrequest
	wire         vga_csr_agent_m0_debugaccess;                                            // vga_csr_agent:m0_debugaccess -> vga_csr_translator:uav_debugaccess
	wire   [8:0] vga_csr_agent_m0_address;                                                // vga_csr_agent:m0_address -> vga_csr_translator:uav_address
	wire   [3:0] vga_csr_agent_m0_byteenable;                                             // vga_csr_agent:m0_byteenable -> vga_csr_translator:uav_byteenable
	wire         vga_csr_agent_m0_read;                                                   // vga_csr_agent:m0_read -> vga_csr_translator:uav_read
	wire         vga_csr_agent_m0_readdatavalid;                                          // vga_csr_translator:uav_readdatavalid -> vga_csr_agent:m0_readdatavalid
	wire         vga_csr_agent_m0_lock;                                                   // vga_csr_agent:m0_lock -> vga_csr_translator:uav_lock
	wire  [31:0] vga_csr_agent_m0_writedata;                                              // vga_csr_agent:m0_writedata -> vga_csr_translator:uav_writedata
	wire         vga_csr_agent_m0_write;                                                  // vga_csr_agent:m0_write -> vga_csr_translator:uav_write
	wire   [2:0] vga_csr_agent_m0_burstcount;                                             // vga_csr_agent:m0_burstcount -> vga_csr_translator:uav_burstcount
	wire         vga_csr_agent_rf_source_valid;                                           // vga_csr_agent:rf_source_valid -> vga_csr_agent_rsp_fifo:in_valid
	wire  [83:0] vga_csr_agent_rf_source_data;                                            // vga_csr_agent:rf_source_data -> vga_csr_agent_rsp_fifo:in_data
	wire         vga_csr_agent_rf_source_ready;                                           // vga_csr_agent_rsp_fifo:in_ready -> vga_csr_agent:rf_source_ready
	wire         vga_csr_agent_rf_source_startofpacket;                                   // vga_csr_agent:rf_source_startofpacket -> vga_csr_agent_rsp_fifo:in_startofpacket
	wire         vga_csr_agent_rf_source_endofpacket;                                     // vga_csr_agent:rf_source_endofpacket -> vga_csr_agent_rsp_fifo:in_endofpacket
	wire         vga_csr_agent_rsp_fifo_out_valid;                                        // vga_csr_agent_rsp_fifo:out_valid -> vga_csr_agent:rf_sink_valid
	wire  [83:0] vga_csr_agent_rsp_fifo_out_data;                                         // vga_csr_agent_rsp_fifo:out_data -> vga_csr_agent:rf_sink_data
	wire         vga_csr_agent_rsp_fifo_out_ready;                                        // vga_csr_agent:rf_sink_ready -> vga_csr_agent_rsp_fifo:out_ready
	wire         vga_csr_agent_rsp_fifo_out_startofpacket;                                // vga_csr_agent_rsp_fifo:out_startofpacket -> vga_csr_agent:rf_sink_startofpacket
	wire         vga_csr_agent_rsp_fifo_out_endofpacket;                                  // vga_csr_agent_rsp_fifo:out_endofpacket -> vga_csr_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                                   // cmd_mux_001:src_valid -> vga_csr_agent:cp_valid
	wire  [82:0] cmd_mux_001_src_data;                                                    // cmd_mux_001:src_data -> vga_csr_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                   // vga_csr_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [5:0] cmd_mux_001_src_channel;                                                 // cmd_mux_001:src_channel -> vga_csr_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                           // cmd_mux_001:src_startofpacket -> vga_csr_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                             // cmd_mux_001:src_endofpacket -> vga_csr_agent:cp_endofpacket
	wire  [31:0] systimer_s1_agent_m0_readdata;                                           // systimer_s1_translator:uav_readdata -> systimer_s1_agent:m0_readdata
	wire         systimer_s1_agent_m0_waitrequest;                                        // systimer_s1_translator:uav_waitrequest -> systimer_s1_agent:m0_waitrequest
	wire         systimer_s1_agent_m0_debugaccess;                                        // systimer_s1_agent:m0_debugaccess -> systimer_s1_translator:uav_debugaccess
	wire   [8:0] systimer_s1_agent_m0_address;                                            // systimer_s1_agent:m0_address -> systimer_s1_translator:uav_address
	wire   [3:0] systimer_s1_agent_m0_byteenable;                                         // systimer_s1_agent:m0_byteenable -> systimer_s1_translator:uav_byteenable
	wire         systimer_s1_agent_m0_read;                                               // systimer_s1_agent:m0_read -> systimer_s1_translator:uav_read
	wire         systimer_s1_agent_m0_readdatavalid;                                      // systimer_s1_translator:uav_readdatavalid -> systimer_s1_agent:m0_readdatavalid
	wire         systimer_s1_agent_m0_lock;                                               // systimer_s1_agent:m0_lock -> systimer_s1_translator:uav_lock
	wire  [31:0] systimer_s1_agent_m0_writedata;                                          // systimer_s1_agent:m0_writedata -> systimer_s1_translator:uav_writedata
	wire         systimer_s1_agent_m0_write;                                              // systimer_s1_agent:m0_write -> systimer_s1_translator:uav_write
	wire   [2:0] systimer_s1_agent_m0_burstcount;                                         // systimer_s1_agent:m0_burstcount -> systimer_s1_translator:uav_burstcount
	wire         systimer_s1_agent_rf_source_valid;                                       // systimer_s1_agent:rf_source_valid -> systimer_s1_agent_rsp_fifo:in_valid
	wire  [83:0] systimer_s1_agent_rf_source_data;                                        // systimer_s1_agent:rf_source_data -> systimer_s1_agent_rsp_fifo:in_data
	wire         systimer_s1_agent_rf_source_ready;                                       // systimer_s1_agent_rsp_fifo:in_ready -> systimer_s1_agent:rf_source_ready
	wire         systimer_s1_agent_rf_source_startofpacket;                               // systimer_s1_agent:rf_source_startofpacket -> systimer_s1_agent_rsp_fifo:in_startofpacket
	wire         systimer_s1_agent_rf_source_endofpacket;                                 // systimer_s1_agent:rf_source_endofpacket -> systimer_s1_agent_rsp_fifo:in_endofpacket
	wire         systimer_s1_agent_rsp_fifo_out_valid;                                    // systimer_s1_agent_rsp_fifo:out_valid -> systimer_s1_agent:rf_sink_valid
	wire  [83:0] systimer_s1_agent_rsp_fifo_out_data;                                     // systimer_s1_agent_rsp_fifo:out_data -> systimer_s1_agent:rf_sink_data
	wire         systimer_s1_agent_rsp_fifo_out_ready;                                    // systimer_s1_agent:rf_sink_ready -> systimer_s1_agent_rsp_fifo:out_ready
	wire         systimer_s1_agent_rsp_fifo_out_startofpacket;                            // systimer_s1_agent_rsp_fifo:out_startofpacket -> systimer_s1_agent:rf_sink_startofpacket
	wire         systimer_s1_agent_rsp_fifo_out_endofpacket;                              // systimer_s1_agent_rsp_fifo:out_endofpacket -> systimer_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                                   // cmd_mux_002:src_valid -> systimer_s1_agent:cp_valid
	wire  [82:0] cmd_mux_002_src_data;                                                    // cmd_mux_002:src_data -> systimer_s1_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                   // systimer_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [5:0] cmd_mux_002_src_channel;                                                 // cmd_mux_002:src_channel -> systimer_s1_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                           // cmd_mux_002:src_startofpacket -> systimer_s1_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                             // cmd_mux_002:src_endofpacket -> systimer_s1_agent:cp_endofpacket
	wire  [31:0] gpio_s1_agent_m0_readdata;                                               // gpio_s1_translator:uav_readdata -> gpio_s1_agent:m0_readdata
	wire         gpio_s1_agent_m0_waitrequest;                                            // gpio_s1_translator:uav_waitrequest -> gpio_s1_agent:m0_waitrequest
	wire         gpio_s1_agent_m0_debugaccess;                                            // gpio_s1_agent:m0_debugaccess -> gpio_s1_translator:uav_debugaccess
	wire   [8:0] gpio_s1_agent_m0_address;                                                // gpio_s1_agent:m0_address -> gpio_s1_translator:uav_address
	wire   [3:0] gpio_s1_agent_m0_byteenable;                                             // gpio_s1_agent:m0_byteenable -> gpio_s1_translator:uav_byteenable
	wire         gpio_s1_agent_m0_read;                                                   // gpio_s1_agent:m0_read -> gpio_s1_translator:uav_read
	wire         gpio_s1_agent_m0_readdatavalid;                                          // gpio_s1_translator:uav_readdatavalid -> gpio_s1_agent:m0_readdatavalid
	wire         gpio_s1_agent_m0_lock;                                                   // gpio_s1_agent:m0_lock -> gpio_s1_translator:uav_lock
	wire  [31:0] gpio_s1_agent_m0_writedata;                                              // gpio_s1_agent:m0_writedata -> gpio_s1_translator:uav_writedata
	wire         gpio_s1_agent_m0_write;                                                  // gpio_s1_agent:m0_write -> gpio_s1_translator:uav_write
	wire   [2:0] gpio_s1_agent_m0_burstcount;                                             // gpio_s1_agent:m0_burstcount -> gpio_s1_translator:uav_burstcount
	wire         gpio_s1_agent_rf_source_valid;                                           // gpio_s1_agent:rf_source_valid -> gpio_s1_agent_rsp_fifo:in_valid
	wire  [83:0] gpio_s1_agent_rf_source_data;                                            // gpio_s1_agent:rf_source_data -> gpio_s1_agent_rsp_fifo:in_data
	wire         gpio_s1_agent_rf_source_ready;                                           // gpio_s1_agent_rsp_fifo:in_ready -> gpio_s1_agent:rf_source_ready
	wire         gpio_s1_agent_rf_source_startofpacket;                                   // gpio_s1_agent:rf_source_startofpacket -> gpio_s1_agent_rsp_fifo:in_startofpacket
	wire         gpio_s1_agent_rf_source_endofpacket;                                     // gpio_s1_agent:rf_source_endofpacket -> gpio_s1_agent_rsp_fifo:in_endofpacket
	wire         gpio_s1_agent_rsp_fifo_out_valid;                                        // gpio_s1_agent_rsp_fifo:out_valid -> gpio_s1_agent:rf_sink_valid
	wire  [83:0] gpio_s1_agent_rsp_fifo_out_data;                                         // gpio_s1_agent_rsp_fifo:out_data -> gpio_s1_agent:rf_sink_data
	wire         gpio_s1_agent_rsp_fifo_out_ready;                                        // gpio_s1_agent:rf_sink_ready -> gpio_s1_agent_rsp_fifo:out_ready
	wire         gpio_s1_agent_rsp_fifo_out_startofpacket;                                // gpio_s1_agent_rsp_fifo:out_startofpacket -> gpio_s1_agent:rf_sink_startofpacket
	wire         gpio_s1_agent_rsp_fifo_out_endofpacket;                                  // gpio_s1_agent_rsp_fifo:out_endofpacket -> gpio_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_003_src_valid;                                                   // cmd_mux_003:src_valid -> gpio_s1_agent:cp_valid
	wire  [82:0] cmd_mux_003_src_data;                                                    // cmd_mux_003:src_data -> gpio_s1_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                   // gpio_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [5:0] cmd_mux_003_src_channel;                                                 // cmd_mux_003:src_channel -> gpio_s1_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                           // cmd_mux_003:src_startofpacket -> gpio_s1_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                             // cmd_mux_003:src_endofpacket -> gpio_s1_agent:cp_endofpacket
	wire  [31:0] sysuart_s1_agent_m0_readdata;                                            // sysuart_s1_translator:uav_readdata -> sysuart_s1_agent:m0_readdata
	wire         sysuart_s1_agent_m0_waitrequest;                                         // sysuart_s1_translator:uav_waitrequest -> sysuart_s1_agent:m0_waitrequest
	wire         sysuart_s1_agent_m0_debugaccess;                                         // sysuart_s1_agent:m0_debugaccess -> sysuart_s1_translator:uav_debugaccess
	wire   [8:0] sysuart_s1_agent_m0_address;                                             // sysuart_s1_agent:m0_address -> sysuart_s1_translator:uav_address
	wire   [3:0] sysuart_s1_agent_m0_byteenable;                                          // sysuart_s1_agent:m0_byteenable -> sysuart_s1_translator:uav_byteenable
	wire         sysuart_s1_agent_m0_read;                                                // sysuart_s1_agent:m0_read -> sysuart_s1_translator:uav_read
	wire         sysuart_s1_agent_m0_readdatavalid;                                       // sysuart_s1_translator:uav_readdatavalid -> sysuart_s1_agent:m0_readdatavalid
	wire         sysuart_s1_agent_m0_lock;                                                // sysuart_s1_agent:m0_lock -> sysuart_s1_translator:uav_lock
	wire  [31:0] sysuart_s1_agent_m0_writedata;                                           // sysuart_s1_agent:m0_writedata -> sysuart_s1_translator:uav_writedata
	wire         sysuart_s1_agent_m0_write;                                               // sysuart_s1_agent:m0_write -> sysuart_s1_translator:uav_write
	wire   [2:0] sysuart_s1_agent_m0_burstcount;                                          // sysuart_s1_agent:m0_burstcount -> sysuart_s1_translator:uav_burstcount
	wire         sysuart_s1_agent_rf_source_valid;                                        // sysuart_s1_agent:rf_source_valid -> sysuart_s1_agent_rsp_fifo:in_valid
	wire  [83:0] sysuart_s1_agent_rf_source_data;                                         // sysuart_s1_agent:rf_source_data -> sysuart_s1_agent_rsp_fifo:in_data
	wire         sysuart_s1_agent_rf_source_ready;                                        // sysuart_s1_agent_rsp_fifo:in_ready -> sysuart_s1_agent:rf_source_ready
	wire         sysuart_s1_agent_rf_source_startofpacket;                                // sysuart_s1_agent:rf_source_startofpacket -> sysuart_s1_agent_rsp_fifo:in_startofpacket
	wire         sysuart_s1_agent_rf_source_endofpacket;                                  // sysuart_s1_agent:rf_source_endofpacket -> sysuart_s1_agent_rsp_fifo:in_endofpacket
	wire         sysuart_s1_agent_rsp_fifo_out_valid;                                     // sysuart_s1_agent_rsp_fifo:out_valid -> sysuart_s1_agent:rf_sink_valid
	wire  [83:0] sysuart_s1_agent_rsp_fifo_out_data;                                      // sysuart_s1_agent_rsp_fifo:out_data -> sysuart_s1_agent:rf_sink_data
	wire         sysuart_s1_agent_rsp_fifo_out_ready;                                     // sysuart_s1_agent:rf_sink_ready -> sysuart_s1_agent_rsp_fifo:out_ready
	wire         sysuart_s1_agent_rsp_fifo_out_startofpacket;                             // sysuart_s1_agent_rsp_fifo:out_startofpacket -> sysuart_s1_agent:rf_sink_startofpacket
	wire         sysuart_s1_agent_rsp_fifo_out_endofpacket;                               // sysuart_s1_agent_rsp_fifo:out_endofpacket -> sysuart_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_004_src_valid;                                                   // cmd_mux_004:src_valid -> sysuart_s1_agent:cp_valid
	wire  [82:0] cmd_mux_004_src_data;                                                    // cmd_mux_004:src_data -> sysuart_s1_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                   // sysuart_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [5:0] cmd_mux_004_src_channel;                                                 // cmd_mux_004:src_channel -> sysuart_s1_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                           // cmd_mux_004:src_startofpacket -> sysuart_s1_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                             // cmd_mux_004:src_endofpacket -> sysuart_s1_agent:cp_endofpacket
	wire  [31:0] barcolor_s1_agent_m0_readdata;                                           // barcolor_s1_translator:uav_readdata -> barcolor_s1_agent:m0_readdata
	wire         barcolor_s1_agent_m0_waitrequest;                                        // barcolor_s1_translator:uav_waitrequest -> barcolor_s1_agent:m0_waitrequest
	wire         barcolor_s1_agent_m0_debugaccess;                                        // barcolor_s1_agent:m0_debugaccess -> barcolor_s1_translator:uav_debugaccess
	wire   [8:0] barcolor_s1_agent_m0_address;                                            // barcolor_s1_agent:m0_address -> barcolor_s1_translator:uav_address
	wire   [3:0] barcolor_s1_agent_m0_byteenable;                                         // barcolor_s1_agent:m0_byteenable -> barcolor_s1_translator:uav_byteenable
	wire         barcolor_s1_agent_m0_read;                                               // barcolor_s1_agent:m0_read -> barcolor_s1_translator:uav_read
	wire         barcolor_s1_agent_m0_readdatavalid;                                      // barcolor_s1_translator:uav_readdatavalid -> barcolor_s1_agent:m0_readdatavalid
	wire         barcolor_s1_agent_m0_lock;                                               // barcolor_s1_agent:m0_lock -> barcolor_s1_translator:uav_lock
	wire  [31:0] barcolor_s1_agent_m0_writedata;                                          // barcolor_s1_agent:m0_writedata -> barcolor_s1_translator:uav_writedata
	wire         barcolor_s1_agent_m0_write;                                              // barcolor_s1_agent:m0_write -> barcolor_s1_translator:uav_write
	wire   [2:0] barcolor_s1_agent_m0_burstcount;                                         // barcolor_s1_agent:m0_burstcount -> barcolor_s1_translator:uav_burstcount
	wire         barcolor_s1_agent_rf_source_valid;                                       // barcolor_s1_agent:rf_source_valid -> barcolor_s1_agent_rsp_fifo:in_valid
	wire  [83:0] barcolor_s1_agent_rf_source_data;                                        // barcolor_s1_agent:rf_source_data -> barcolor_s1_agent_rsp_fifo:in_data
	wire         barcolor_s1_agent_rf_source_ready;                                       // barcolor_s1_agent_rsp_fifo:in_ready -> barcolor_s1_agent:rf_source_ready
	wire         barcolor_s1_agent_rf_source_startofpacket;                               // barcolor_s1_agent:rf_source_startofpacket -> barcolor_s1_agent_rsp_fifo:in_startofpacket
	wire         barcolor_s1_agent_rf_source_endofpacket;                                 // barcolor_s1_agent:rf_source_endofpacket -> barcolor_s1_agent_rsp_fifo:in_endofpacket
	wire         barcolor_s1_agent_rsp_fifo_out_valid;                                    // barcolor_s1_agent_rsp_fifo:out_valid -> barcolor_s1_agent:rf_sink_valid
	wire  [83:0] barcolor_s1_agent_rsp_fifo_out_data;                                     // barcolor_s1_agent_rsp_fifo:out_data -> barcolor_s1_agent:rf_sink_data
	wire         barcolor_s1_agent_rsp_fifo_out_ready;                                    // barcolor_s1_agent:rf_sink_ready -> barcolor_s1_agent_rsp_fifo:out_ready
	wire         barcolor_s1_agent_rsp_fifo_out_startofpacket;                            // barcolor_s1_agent_rsp_fifo:out_startofpacket -> barcolor_s1_agent:rf_sink_startofpacket
	wire         barcolor_s1_agent_rsp_fifo_out_endofpacket;                              // barcolor_s1_agent_rsp_fifo:out_endofpacket -> barcolor_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_005_src_valid;                                                   // cmd_mux_005:src_valid -> barcolor_s1_agent:cp_valid
	wire  [82:0] cmd_mux_005_src_data;                                                    // cmd_mux_005:src_data -> barcolor_s1_agent:cp_data
	wire         cmd_mux_005_src_ready;                                                   // barcolor_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [5:0] cmd_mux_005_src_channel;                                                 // cmd_mux_005:src_channel -> barcolor_s1_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                           // cmd_mux_005:src_startofpacket -> barcolor_s1_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                             // cmd_mux_005:src_endofpacket -> barcolor_s1_agent:cp_endofpacket
	wire         peripheral_bridge_m0_agent_cp_valid;                                     // peripheral_bridge_m0_agent:cp_valid -> router:sink_valid
	wire  [82:0] peripheral_bridge_m0_agent_cp_data;                                      // peripheral_bridge_m0_agent:cp_data -> router:sink_data
	wire         peripheral_bridge_m0_agent_cp_ready;                                     // router:sink_ready -> peripheral_bridge_m0_agent:cp_ready
	wire         peripheral_bridge_m0_agent_cp_startofpacket;                             // peripheral_bridge_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         peripheral_bridge_m0_agent_cp_endofpacket;                               // peripheral_bridge_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         sysid_control_slave_agent_rp_valid;                                      // sysid_control_slave_agent:rp_valid -> router_001:sink_valid
	wire  [82:0] sysid_control_slave_agent_rp_data;                                       // sysid_control_slave_agent:rp_data -> router_001:sink_data
	wire         sysid_control_slave_agent_rp_ready;                                      // router_001:sink_ready -> sysid_control_slave_agent:rp_ready
	wire         sysid_control_slave_agent_rp_startofpacket;                              // sysid_control_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         sysid_control_slave_agent_rp_endofpacket;                                // sysid_control_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                    // router_001:src_valid -> rsp_demux:sink_valid
	wire  [82:0] router_001_src_data;                                                     // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                                    // rsp_demux:sink_ready -> router_001:src_ready
	wire   [5:0] router_001_src_channel;                                                  // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                            // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                              // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         vga_csr_agent_rp_valid;                                                  // vga_csr_agent:rp_valid -> router_002:sink_valid
	wire  [82:0] vga_csr_agent_rp_data;                                                   // vga_csr_agent:rp_data -> router_002:sink_data
	wire         vga_csr_agent_rp_ready;                                                  // router_002:sink_ready -> vga_csr_agent:rp_ready
	wire         vga_csr_agent_rp_startofpacket;                                          // vga_csr_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         vga_csr_agent_rp_endofpacket;                                            // vga_csr_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                    // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [82:0] router_002_src_data;                                                     // router_002:src_data -> rsp_demux_001:sink_data
	wire         router_002_src_ready;                                                    // rsp_demux_001:sink_ready -> router_002:src_ready
	wire   [5:0] router_002_src_channel;                                                  // router_002:src_channel -> rsp_demux_001:sink_channel
	wire         router_002_src_startofpacket;                                            // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_002_src_endofpacket;                                              // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         systimer_s1_agent_rp_valid;                                              // systimer_s1_agent:rp_valid -> router_003:sink_valid
	wire  [82:0] systimer_s1_agent_rp_data;                                               // systimer_s1_agent:rp_data -> router_003:sink_data
	wire         systimer_s1_agent_rp_ready;                                              // router_003:sink_ready -> systimer_s1_agent:rp_ready
	wire         systimer_s1_agent_rp_startofpacket;                                      // systimer_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         systimer_s1_agent_rp_endofpacket;                                        // systimer_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                    // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [82:0] router_003_src_data;                                                     // router_003:src_data -> rsp_demux_002:sink_data
	wire         router_003_src_ready;                                                    // rsp_demux_002:sink_ready -> router_003:src_ready
	wire   [5:0] router_003_src_channel;                                                  // router_003:src_channel -> rsp_demux_002:sink_channel
	wire         router_003_src_startofpacket;                                            // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_003_src_endofpacket;                                              // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         gpio_s1_agent_rp_valid;                                                  // gpio_s1_agent:rp_valid -> router_004:sink_valid
	wire  [82:0] gpio_s1_agent_rp_data;                                                   // gpio_s1_agent:rp_data -> router_004:sink_data
	wire         gpio_s1_agent_rp_ready;                                                  // router_004:sink_ready -> gpio_s1_agent:rp_ready
	wire         gpio_s1_agent_rp_startofpacket;                                          // gpio_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         gpio_s1_agent_rp_endofpacket;                                            // gpio_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                    // router_004:src_valid -> rsp_demux_003:sink_valid
	wire  [82:0] router_004_src_data;                                                     // router_004:src_data -> rsp_demux_003:sink_data
	wire         router_004_src_ready;                                                    // rsp_demux_003:sink_ready -> router_004:src_ready
	wire   [5:0] router_004_src_channel;                                                  // router_004:src_channel -> rsp_demux_003:sink_channel
	wire         router_004_src_startofpacket;                                            // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_004_src_endofpacket;                                              // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         sysuart_s1_agent_rp_valid;                                               // sysuart_s1_agent:rp_valid -> router_005:sink_valid
	wire  [82:0] sysuart_s1_agent_rp_data;                                                // sysuart_s1_agent:rp_data -> router_005:sink_data
	wire         sysuart_s1_agent_rp_ready;                                               // router_005:sink_ready -> sysuart_s1_agent:rp_ready
	wire         sysuart_s1_agent_rp_startofpacket;                                       // sysuart_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         sysuart_s1_agent_rp_endofpacket;                                         // sysuart_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                    // router_005:src_valid -> rsp_demux_004:sink_valid
	wire  [82:0] router_005_src_data;                                                     // router_005:src_data -> rsp_demux_004:sink_data
	wire         router_005_src_ready;                                                    // rsp_demux_004:sink_ready -> router_005:src_ready
	wire   [5:0] router_005_src_channel;                                                  // router_005:src_channel -> rsp_demux_004:sink_channel
	wire         router_005_src_startofpacket;                                            // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_005_src_endofpacket;                                              // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         barcolor_s1_agent_rp_valid;                                              // barcolor_s1_agent:rp_valid -> router_006:sink_valid
	wire  [82:0] barcolor_s1_agent_rp_data;                                               // barcolor_s1_agent:rp_data -> router_006:sink_data
	wire         barcolor_s1_agent_rp_ready;                                              // router_006:sink_ready -> barcolor_s1_agent:rp_ready
	wire         barcolor_s1_agent_rp_startofpacket;                                      // barcolor_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         barcolor_s1_agent_rp_endofpacket;                                        // barcolor_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                                    // router_006:src_valid -> rsp_demux_005:sink_valid
	wire  [82:0] router_006_src_data;                                                     // router_006:src_data -> rsp_demux_005:sink_data
	wire         router_006_src_ready;                                                    // rsp_demux_005:sink_ready -> router_006:src_ready
	wire   [5:0] router_006_src_channel;                                                  // router_006:src_channel -> rsp_demux_005:sink_channel
	wire         router_006_src_startofpacket;                                            // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_006_src_endofpacket;                                              // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         router_src_valid;                                                        // router:src_valid -> peripheral_bridge_m0_limiter:cmd_sink_valid
	wire  [82:0] router_src_data;                                                         // router:src_data -> peripheral_bridge_m0_limiter:cmd_sink_data
	wire         router_src_ready;                                                        // peripheral_bridge_m0_limiter:cmd_sink_ready -> router:src_ready
	wire   [5:0] router_src_channel;                                                      // router:src_channel -> peripheral_bridge_m0_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                                // router:src_startofpacket -> peripheral_bridge_m0_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                                  // router:src_endofpacket -> peripheral_bridge_m0_limiter:cmd_sink_endofpacket
	wire  [82:0] peripheral_bridge_m0_limiter_cmd_src_data;                               // peripheral_bridge_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         peripheral_bridge_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> peripheral_bridge_m0_limiter:cmd_src_ready
	wire   [5:0] peripheral_bridge_m0_limiter_cmd_src_channel;                            // peripheral_bridge_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         peripheral_bridge_m0_limiter_cmd_src_startofpacket;                      // peripheral_bridge_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         peripheral_bridge_m0_limiter_cmd_src_endofpacket;                        // peripheral_bridge_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                       // rsp_mux:src_valid -> peripheral_bridge_m0_limiter:rsp_sink_valid
	wire  [82:0] rsp_mux_src_data;                                                        // rsp_mux:src_data -> peripheral_bridge_m0_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                       // peripheral_bridge_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [5:0] rsp_mux_src_channel;                                                     // rsp_mux:src_channel -> peripheral_bridge_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                               // rsp_mux:src_startofpacket -> peripheral_bridge_m0_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                                 // rsp_mux:src_endofpacket -> peripheral_bridge_m0_limiter:rsp_sink_endofpacket
	wire         peripheral_bridge_m0_limiter_rsp_src_valid;                              // peripheral_bridge_m0_limiter:rsp_src_valid -> peripheral_bridge_m0_agent:rp_valid
	wire  [82:0] peripheral_bridge_m0_limiter_rsp_src_data;                               // peripheral_bridge_m0_limiter:rsp_src_data -> peripheral_bridge_m0_agent:rp_data
	wire         peripheral_bridge_m0_limiter_rsp_src_ready;                              // peripheral_bridge_m0_agent:rp_ready -> peripheral_bridge_m0_limiter:rsp_src_ready
	wire   [5:0] peripheral_bridge_m0_limiter_rsp_src_channel;                            // peripheral_bridge_m0_limiter:rsp_src_channel -> peripheral_bridge_m0_agent:rp_channel
	wire         peripheral_bridge_m0_limiter_rsp_src_startofpacket;                      // peripheral_bridge_m0_limiter:rsp_src_startofpacket -> peripheral_bridge_m0_agent:rp_startofpacket
	wire         peripheral_bridge_m0_limiter_rsp_src_endofpacket;                        // peripheral_bridge_m0_limiter:rsp_src_endofpacket -> peripheral_bridge_m0_agent:rp_endofpacket
	wire         cmd_demux_src0_valid;                                                    // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [82:0] cmd_demux_src0_data;                                                     // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                    // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [5:0] cmd_demux_src0_channel;                                                  // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                            // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                              // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                    // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [82:0] cmd_demux_src1_data;                                                     // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                    // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [5:0] cmd_demux_src1_channel;                                                  // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                            // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                              // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                    // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [82:0] cmd_demux_src2_data;                                                     // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                    // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [5:0] cmd_demux_src2_channel;                                                  // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                            // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                              // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                    // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [82:0] cmd_demux_src3_data;                                                     // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                                    // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [5:0] cmd_demux_src3_channel;                                                  // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                            // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                              // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                    // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [82:0] cmd_demux_src4_data;                                                     // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire         cmd_demux_src4_ready;                                                    // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [5:0] cmd_demux_src4_channel;                                                  // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_startofpacket;                                            // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         cmd_demux_src4_endofpacket;                                              // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                                    // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [82:0] cmd_demux_src5_data;                                                     // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire         cmd_demux_src5_ready;                                                    // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [5:0] cmd_demux_src5_channel;                                                  // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_src5_startofpacket;                                            // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         cmd_demux_src5_endofpacket;                                              // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                    // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [82:0] rsp_demux_src0_data;                                                     // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                    // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [5:0] rsp_demux_src0_channel;                                                  // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                            // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                              // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [82:0] rsp_demux_001_src0_data;                                                 // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [5:0] rsp_demux_001_src0_channel;                                              // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                        // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                          // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [82:0] rsp_demux_002_src0_data;                                                 // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [5:0] rsp_demux_002_src0_channel;                                              // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                        // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                          // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_003_src0_valid;                                                // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [82:0] rsp_demux_003_src0_data;                                                 // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                                // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [5:0] rsp_demux_003_src0_channel;                                              // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                        // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                          // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                                // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [82:0] rsp_demux_004_src0_data;                                                 // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire         rsp_demux_004_src0_ready;                                                // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [5:0] rsp_demux_004_src0_channel;                                              // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_startofpacket;                                        // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                          // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                                // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [82:0] rsp_demux_005_src0_data;                                                 // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire         rsp_demux_005_src0_ready;                                                // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [5:0] rsp_demux_005_src0_channel;                                              // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire         rsp_demux_005_src0_startofpacket;                                        // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                          // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire   [5:0] peripheral_bridge_m0_limiter_cmd_valid_data;                             // peripheral_bridge_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire         sysid_control_slave_agent_rdata_fifo_src_valid;                          // sysid_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                           // sysid_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         sysid_control_slave_agent_rdata_fifo_src_ready;                          // avalon_st_adapter:in_0_ready -> sysid_control_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                           // avalon_st_adapter:out_0_valid -> sysid_control_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                            // avalon_st_adapter:out_0_data -> sysid_control_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                           // sysid_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                           // avalon_st_adapter:out_0_error -> sysid_control_slave_agent:rdata_fifo_sink_error
	wire         vga_csr_agent_rdata_fifo_src_valid;                                      // vga_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] vga_csr_agent_rdata_fifo_src_data;                                       // vga_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         vga_csr_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_001:in_0_ready -> vga_csr_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                       // avalon_st_adapter_001:out_0_valid -> vga_csr_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                        // avalon_st_adapter_001:out_0_data -> vga_csr_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                       // vga_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                       // avalon_st_adapter_001:out_0_error -> vga_csr_agent:rdata_fifo_sink_error
	wire         systimer_s1_agent_rdata_fifo_src_valid;                                  // systimer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] systimer_s1_agent_rdata_fifo_src_data;                                   // systimer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         systimer_s1_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_002:in_0_ready -> systimer_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                       // avalon_st_adapter_002:out_0_valid -> systimer_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                        // avalon_st_adapter_002:out_0_data -> systimer_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                       // systimer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                       // avalon_st_adapter_002:out_0_error -> systimer_s1_agent:rdata_fifo_sink_error
	wire         gpio_s1_agent_rdata_fifo_src_valid;                                      // gpio_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] gpio_s1_agent_rdata_fifo_src_data;                                       // gpio_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         gpio_s1_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_003:in_0_ready -> gpio_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                       // avalon_st_adapter_003:out_0_valid -> gpio_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                        // avalon_st_adapter_003:out_0_data -> gpio_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                       // gpio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                       // avalon_st_adapter_003:out_0_error -> gpio_s1_agent:rdata_fifo_sink_error
	wire         sysuart_s1_agent_rdata_fifo_src_valid;                                   // sysuart_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] sysuart_s1_agent_rdata_fifo_src_data;                                    // sysuart_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire         sysuart_s1_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_004:in_0_ready -> sysuart_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_004_out_0_valid;                                       // avalon_st_adapter_004:out_0_valid -> sysuart_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                        // avalon_st_adapter_004:out_0_data -> sysuart_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                       // sysuart_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                       // avalon_st_adapter_004:out_0_error -> sysuart_s1_agent:rdata_fifo_sink_error
	wire         barcolor_s1_agent_rdata_fifo_src_valid;                                  // barcolor_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] barcolor_s1_agent_rdata_fifo_src_data;                                   // barcolor_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire         barcolor_s1_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_005:in_0_ready -> barcolor_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_005_out_0_valid;                                       // avalon_st_adapter_005:out_0_valid -> barcolor_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                        // avalon_st_adapter_005:out_0_data -> barcolor_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                       // barcolor_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                       // avalon_st_adapter_005:out_0_error -> barcolor_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (9),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (9),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) peripheral_bridge_m0_translator (
		.clk                    (peri_clk_clk_clk),                                                        //                       clk.clk
		.reset                  (peripheral_bridge_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (peripheral_bridge_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (peripheral_bridge_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (peripheral_bridge_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (peripheral_bridge_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (peripheral_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (peripheral_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (peripheral_bridge_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (peripheral_bridge_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (peripheral_bridge_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (peripheral_bridge_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (peripheral_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (peripheral_bridge_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (peripheral_bridge_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (peripheral_bridge_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (peripheral_bridge_m0_byteenable),                                         //                          .byteenable
		.av_read                (peripheral_bridge_m0_read),                                               //                          .read
		.av_readdata            (peripheral_bridge_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (peripheral_bridge_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (peripheral_bridge_m0_write),                                              //                          .write
		.av_writedata           (peripheral_bridge_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (peripheral_bridge_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                    //               (terminated)
		.av_chipselect          (1'b0),                                                                    //               (terminated)
		.av_lock                (1'b0),                                                                    //               (terminated)
		.uav_clken              (),                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                   //               (terminated)
		.av_response            (),                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                         //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (peri_clk_clk_clk),                                    //                      clk.clk
		.reset                  (peripheral_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),                   //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),                  //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),              //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (sysid_control_slave_address),                         //      avalon_anti_slave_0.address
		.av_readdata            (sysid_control_slave_readdata),                        //                         .readdata
		.av_write               (),                                                    //              (terminated)
		.av_read                (),                                                    //              (terminated)
		.av_writedata           (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_csr_translator (
		.clk                    (peri_clk_clk_clk),                                    //                      clk.clk
		.reset                  (peripheral_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (vga_csr_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (vga_csr_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (vga_csr_agent_m0_read),                               //                         .read
		.uav_write              (vga_csr_agent_m0_write),                              //                         .write
		.uav_waitrequest        (vga_csr_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (vga_csr_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (vga_csr_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (vga_csr_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (vga_csr_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (vga_csr_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (vga_csr_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (vga_csr_address),                                     //      avalon_anti_slave_0.address
		.av_write               (vga_csr_write),                                       //                         .write
		.av_read                (vga_csr_read),                                        //                         .read
		.av_readdata            (vga_csr_readdata),                                    //                         .readdata
		.av_writedata           (vga_csr_writedata),                                   //                         .writedata
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) systimer_s1_translator (
		.clk                    (peri_clk_clk_clk),                                    //                      clk.clk
		.reset                  (peripheral_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (systimer_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (systimer_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (systimer_s1_agent_m0_read),                           //                         .read
		.uav_write              (systimer_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (systimer_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (systimer_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (systimer_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (systimer_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (systimer_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (systimer_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (systimer_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (systimer_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (systimer_s1_write),                                   //                         .write
		.av_readdata            (systimer_s1_readdata),                                //                         .readdata
		.av_writedata           (systimer_s1_writedata),                               //                         .writedata
		.av_chipselect          (systimer_s1_chipselect),                              //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) gpio_s1_translator (
		.clk                    (peri_clk_clk_clk),                                    //                      clk.clk
		.reset                  (peripheral_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (gpio_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (gpio_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (gpio_s1_agent_m0_read),                               //                         .read
		.uav_write              (gpio_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest        (gpio_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (gpio_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (gpio_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (gpio_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (gpio_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (gpio_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (gpio_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (gpio_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write               (gpio_s1_write),                                       //                         .write
		.av_readdata            (gpio_s1_readdata),                                    //                         .readdata
		.av_writedata           (gpio_s1_writedata),                                   //                         .writedata
		.av_chipselect          (gpio_s1_chipselect),                                  //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysuart_s1_translator (
		.clk                    (peri_clk_clk_clk),                                    //                      clk.clk
		.reset                  (peripheral_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysuart_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (sysuart_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (sysuart_s1_agent_m0_read),                            //                         .read
		.uav_write              (sysuart_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (sysuart_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (sysuart_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (sysuart_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (sysuart_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (sysuart_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (sysuart_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (sysuart_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (sysuart_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (sysuart_s1_write),                                    //                         .write
		.av_read                (sysuart_s1_read),                                     //                         .read
		.av_readdata            (sysuart_s1_readdata),                                 //                         .readdata
		.av_writedata           (sysuart_s1_writedata),                                //                         .writedata
		.av_begintransfer       (sysuart_s1_begintransfer),                            //                         .begintransfer
		.av_chipselect          (sysuart_s1_chipselect),                               //                         .chipselect
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) barcolor_s1_translator (
		.clk                    (peri_clk_clk_clk),                                    //                      clk.clk
		.reset                  (peripheral_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (barcolor_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (barcolor_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (barcolor_s1_agent_m0_read),                           //                         .read
		.uav_write              (barcolor_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (barcolor_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (barcolor_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (barcolor_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (barcolor_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (barcolor_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (barcolor_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (barcolor_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (barcolor_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (barcolor_s1_write),                                   //                         .write
		.av_readdata            (barcolor_s1_readdata),                                //                         .readdata
		.av_writedata           (barcolor_s1_writedata),                               //                         .writedata
		.av_chipselect          (barcolor_s1_chipselect),                              //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_QOS_H                 (63),
		.PKT_QOS_L                 (63),
		.PKT_DATA_SIDEBAND_H       (61),
		.PKT_DATA_SIDEBAND_L       (61),
		.PKT_ADDR_SIDEBAND_H       (60),
		.PKT_ADDR_SIDEBAND_L       (60),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_CACHE_H               (77),
		.PKT_CACHE_L               (74),
		.PKT_THREAD_ID_H           (70),
		.PKT_THREAD_ID_L           (70),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_EXCLUSIVE       (50),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.ST_DATA_W                 (83),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) peripheral_bridge_m0_agent (
		.clk                   (peri_clk_clk_clk),                                                        //       clk.clk
		.reset                 (peripheral_bridge_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (peripheral_bridge_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (peripheral_bridge_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (peripheral_bridge_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (peripheral_bridge_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (peripheral_bridge_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (peripheral_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (peripheral_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (peripheral_bridge_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (peripheral_bridge_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (peripheral_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (peripheral_bridge_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (peripheral_bridge_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (peripheral_bridge_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (peripheral_bridge_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (peripheral_bridge_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (peripheral_bridge_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (peripheral_bridge_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (peripheral_bridge_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (peripheral_bridge_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (peripheral_bridge_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (peripheral_bridge_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (peripheral_bridge_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (peri_clk_clk_clk),                                     //             clk.clk
		.reset                   (peripheral_bridge_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                  //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (peri_clk_clk_clk),                                     //       clk.clk
		.reset             (peripheral_bridge_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vga_csr_agent (
		.clk                     (peri_clk_clk_clk),                                    //             clk.clk
		.reset                   (peripheral_bridge_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (vga_csr_agent_m0_address),                            //              m0.address
		.m0_burstcount           (vga_csr_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (vga_csr_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (vga_csr_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (vga_csr_agent_m0_lock),                               //                .lock
		.m0_readdata             (vga_csr_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (vga_csr_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (vga_csr_agent_m0_read),                               //                .read
		.m0_waitrequest          (vga_csr_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (vga_csr_agent_m0_writedata),                          //                .writedata
		.m0_write                (vga_csr_agent_m0_write),                              //                .write
		.rp_endofpacket          (vga_csr_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (vga_csr_agent_rp_ready),                              //                .ready
		.rp_valid                (vga_csr_agent_rp_valid),                              //                .valid
		.rp_data                 (vga_csr_agent_rp_data),                               //                .data
		.rp_startofpacket        (vga_csr_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                             //                .channel
		.rf_sink_ready           (vga_csr_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (vga_csr_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (vga_csr_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (vga_csr_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (vga_csr_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (vga_csr_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (vga_csr_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (vga_csr_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (vga_csr_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (vga_csr_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (vga_csr_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_csr_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (vga_csr_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_csr_agent_rsp_fifo (
		.clk               (peri_clk_clk_clk),                                    //       clk.clk
		.reset             (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (vga_csr_agent_rf_source_data),                        //        in.data
		.in_valid          (vga_csr_agent_rf_source_valid),                       //          .valid
		.in_ready          (vga_csr_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (vga_csr_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (vga_csr_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (vga_csr_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (vga_csr_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (vga_csr_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (vga_csr_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (vga_csr_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) systimer_s1_agent (
		.clk                     (peri_clk_clk_clk),                                    //             clk.clk
		.reset                   (peripheral_bridge_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (systimer_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (systimer_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (systimer_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (systimer_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (systimer_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (systimer_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (systimer_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (systimer_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (systimer_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (systimer_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (systimer_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (systimer_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (systimer_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (systimer_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (systimer_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (systimer_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                             //                .channel
		.rf_sink_ready           (systimer_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (systimer_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (systimer_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (systimer_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (systimer_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (systimer_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (systimer_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (systimer_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (systimer_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (systimer_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (systimer_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (systimer_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (systimer_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) systimer_s1_agent_rsp_fifo (
		.clk               (peri_clk_clk_clk),                                    //       clk.clk
		.reset             (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (systimer_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (systimer_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (systimer_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (systimer_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (systimer_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (systimer_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (systimer_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (systimer_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (systimer_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (systimer_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) gpio_s1_agent (
		.clk                     (peri_clk_clk_clk),                                    //             clk.clk
		.reset                   (peripheral_bridge_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (gpio_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (gpio_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (gpio_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (gpio_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (gpio_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (gpio_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (gpio_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (gpio_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (gpio_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (gpio_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (gpio_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (gpio_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (gpio_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (gpio_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (gpio_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (gpio_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                             //                .channel
		.rf_sink_ready           (gpio_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (gpio_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (gpio_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (gpio_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (gpio_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (gpio_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (gpio_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (gpio_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (gpio_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (gpio_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (gpio_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (gpio_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (gpio_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) gpio_s1_agent_rsp_fifo (
		.clk               (peri_clk_clk_clk),                                    //       clk.clk
		.reset             (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (gpio_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (gpio_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (gpio_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (gpio_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (gpio_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (gpio_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (gpio_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (gpio_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (gpio_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (gpio_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysuart_s1_agent (
		.clk                     (peri_clk_clk_clk),                                    //             clk.clk
		.reset                   (peripheral_bridge_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sysuart_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (sysuart_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (sysuart_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (sysuart_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (sysuart_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (sysuart_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (sysuart_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (sysuart_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (sysuart_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (sysuart_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (sysuart_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (sysuart_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (sysuart_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (sysuart_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (sysuart_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (sysuart_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                             //                .channel
		.rf_sink_ready           (sysuart_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (sysuart_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (sysuart_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (sysuart_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (sysuart_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (sysuart_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (sysuart_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (sysuart_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (sysuart_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (sysuart_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (sysuart_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysuart_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (sysuart_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysuart_s1_agent_rsp_fifo (
		.clk               (peri_clk_clk_clk),                                    //       clk.clk
		.reset             (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sysuart_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (sysuart_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (sysuart_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (sysuart_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (sysuart_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (sysuart_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (sysuart_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (sysuart_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (sysuart_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (sysuart_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) barcolor_s1_agent (
		.clk                     (peri_clk_clk_clk),                                    //             clk.clk
		.reset                   (peripheral_bridge_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (barcolor_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (barcolor_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (barcolor_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (barcolor_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (barcolor_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (barcolor_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (barcolor_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (barcolor_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (barcolor_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (barcolor_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (barcolor_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (barcolor_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (barcolor_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (barcolor_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (barcolor_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (barcolor_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                             //                .channel
		.rf_sink_ready           (barcolor_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (barcolor_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (barcolor_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (barcolor_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (barcolor_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (barcolor_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (barcolor_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (barcolor_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (barcolor_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (barcolor_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (barcolor_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (barcolor_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (barcolor_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) barcolor_s1_agent_rsp_fifo (
		.clk               (peri_clk_clk_clk),                                    //       clk.clk
		.reset             (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (barcolor_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (barcolor_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (barcolor_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (barcolor_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (barcolor_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (barcolor_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (barcolor_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (barcolor_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (barcolor_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (barcolor_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	c4e_pcmplay_core_mm_interconnect_1_router router (
		.sink_ready         (peripheral_bridge_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (peripheral_bridge_m0_agent_cp_valid),                 //          .valid
		.sink_data          (peripheral_bridge_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (peripheral_bridge_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (peripheral_bridge_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (peri_clk_clk_clk),                                    //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                    //       src.ready
		.src_valid          (router_src_valid),                                    //          .valid
		.src_data           (router_src_data),                                     //          .data
		.src_channel        (router_src_channel),                                  //          .channel
		.src_startofpacket  (router_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                               //          .endofpacket
	);

	c4e_pcmplay_core_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (sysid_control_slave_agent_rp_ready),                  //      sink.ready
		.sink_valid         (sysid_control_slave_agent_rp_valid),                  //          .valid
		.sink_data          (sysid_control_slave_agent_rp_data),                   //          .data
		.sink_startofpacket (sysid_control_slave_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (sysid_control_slave_agent_rp_endofpacket),            //          .endofpacket
		.clk                (peri_clk_clk_clk),                                    //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                //       src.ready
		.src_valid          (router_001_src_valid),                                //          .valid
		.src_data           (router_001_src_data),                                 //          .data
		.src_channel        (router_001_src_channel),                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                           //          .endofpacket
	);

	c4e_pcmplay_core_mm_interconnect_1_router_001 router_002 (
		.sink_ready         (vga_csr_agent_rp_ready),                              //      sink.ready
		.sink_valid         (vga_csr_agent_rp_valid),                              //          .valid
		.sink_data          (vga_csr_agent_rp_data),                               //          .data
		.sink_startofpacket (vga_csr_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (vga_csr_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (peri_clk_clk_clk),                                    //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                //       src.ready
		.src_valid          (router_002_src_valid),                                //          .valid
		.src_data           (router_002_src_data),                                 //          .data
		.src_channel        (router_002_src_channel),                              //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                           //          .endofpacket
	);

	c4e_pcmplay_core_mm_interconnect_1_router_001 router_003 (
		.sink_ready         (systimer_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (systimer_s1_agent_rp_valid),                          //          .valid
		.sink_data          (systimer_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (systimer_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (systimer_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (peri_clk_clk_clk),                                    //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                //       src.ready
		.src_valid          (router_003_src_valid),                                //          .valid
		.src_data           (router_003_src_data),                                 //          .data
		.src_channel        (router_003_src_channel),                              //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                           //          .endofpacket
	);

	c4e_pcmplay_core_mm_interconnect_1_router_001 router_004 (
		.sink_ready         (gpio_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (gpio_s1_agent_rp_valid),                              //          .valid
		.sink_data          (gpio_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (gpio_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (gpio_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (peri_clk_clk_clk),                                    //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                //       src.ready
		.src_valid          (router_004_src_valid),                                //          .valid
		.src_data           (router_004_src_data),                                 //          .data
		.src_channel        (router_004_src_channel),                              //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                           //          .endofpacket
	);

	c4e_pcmplay_core_mm_interconnect_1_router_001 router_005 (
		.sink_ready         (sysuart_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (sysuart_s1_agent_rp_valid),                           //          .valid
		.sink_data          (sysuart_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (sysuart_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (sysuart_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (peri_clk_clk_clk),                                    //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                //       src.ready
		.src_valid          (router_005_src_valid),                                //          .valid
		.src_data           (router_005_src_data),                                 //          .data
		.src_channel        (router_005_src_channel),                              //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                           //          .endofpacket
	);

	c4e_pcmplay_core_mm_interconnect_1_router_001 router_006 (
		.sink_ready         (barcolor_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (barcolor_s1_agent_rp_valid),                          //          .valid
		.sink_data          (barcolor_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (barcolor_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (barcolor_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (peri_clk_clk_clk),                                    //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                //       src.ready
		.src_valid          (router_006_src_valid),                                //          .valid
		.src_data           (router_006_src_data),                                 //          .data
		.src_channel        (router_006_src_channel),                              //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                           //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (83),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (6),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) peripheral_bridge_m0_limiter (
		.clk                    (peri_clk_clk_clk),                                    //       clk.clk
		.reset                  (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                    //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                    //          .valid
		.cmd_sink_data          (router_src_data),                                     //          .data
		.cmd_sink_channel       (router_src_channel),                                  //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                            //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                              //          .endofpacket
		.cmd_src_ready          (peripheral_bridge_m0_limiter_cmd_src_ready),          //   cmd_src.ready
		.cmd_src_data           (peripheral_bridge_m0_limiter_cmd_src_data),           //          .data
		.cmd_src_channel        (peripheral_bridge_m0_limiter_cmd_src_channel),        //          .channel
		.cmd_src_startofpacket  (peripheral_bridge_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.cmd_src_endofpacket    (peripheral_bridge_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                   //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                 //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                    //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                             //          .endofpacket
		.rsp_src_ready          (peripheral_bridge_m0_limiter_rsp_src_ready),          //   rsp_src.ready
		.rsp_src_valid          (peripheral_bridge_m0_limiter_rsp_src_valid),          //          .valid
		.rsp_src_data           (peripheral_bridge_m0_limiter_rsp_src_data),           //          .data
		.rsp_src_channel        (peripheral_bridge_m0_limiter_rsp_src_channel),        //          .channel
		.rsp_src_startofpacket  (peripheral_bridge_m0_limiter_rsp_src_startofpacket),  //          .startofpacket
		.rsp_src_endofpacket    (peripheral_bridge_m0_limiter_rsp_src_endofpacket),    //          .endofpacket
		.cmd_src_valid          (peripheral_bridge_m0_limiter_cmd_valid_data)          // cmd_valid.data
	);

	c4e_pcmplay_core_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (peri_clk_clk_clk),                                    //        clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (peripheral_bridge_m0_limiter_cmd_src_ready),          //       sink.ready
		.sink_channel       (peripheral_bridge_m0_limiter_cmd_src_channel),        //           .channel
		.sink_data          (peripheral_bridge_m0_limiter_cmd_src_data),           //           .data
		.sink_startofpacket (peripheral_bridge_m0_limiter_cmd_src_startofpacket),  //           .startofpacket
		.sink_endofpacket   (peripheral_bridge_m0_limiter_cmd_src_endofpacket),    //           .endofpacket
		.sink_valid         (peripheral_bridge_m0_limiter_cmd_valid_data),         // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                //           .valid
		.src0_data          (cmd_demux_src0_data),                                 //           .data
		.src0_channel       (cmd_demux_src0_channel),                              //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                        //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                          //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                //           .valid
		.src1_data          (cmd_demux_src1_data),                                 //           .data
		.src1_channel       (cmd_demux_src1_channel),                              //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                        //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                          //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                //           .valid
		.src2_data          (cmd_demux_src2_data),                                 //           .data
		.src2_channel       (cmd_demux_src2_channel),                              //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                        //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                          //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                //           .valid
		.src3_data          (cmd_demux_src3_data),                                 //           .data
		.src3_channel       (cmd_demux_src3_channel),                              //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                        //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                          //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                //           .valid
		.src4_data          (cmd_demux_src4_data),                                 //           .data
		.src4_channel       (cmd_demux_src4_channel),                              //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                        //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                          //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                //           .valid
		.src5_data          (cmd_demux_src5_data),                                 //           .data
		.src5_channel       (cmd_demux_src5_channel),                              //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                        //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket)                           //           .endofpacket
	);

	c4e_pcmplay_core_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (peri_clk_clk_clk),                                    //       clk.clk
		.reset               (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_src_valid),                                   //          .valid
		.src_data            (cmd_mux_src_data),                                    //          .data
		.src_channel         (cmd_mux_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                              //          .channel
		.sink0_data          (cmd_demux_src0_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                           //          .endofpacket
	);

	c4e_pcmplay_core_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (peri_clk_clk_clk),                                    //       clk.clk
		.reset               (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                               //          .valid
		.src_data            (cmd_mux_001_src_data),                                //          .data
		.src_channel         (cmd_mux_001_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                              //          .channel
		.sink0_data          (cmd_demux_src1_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                           //          .endofpacket
	);

	c4e_pcmplay_core_mm_interconnect_1_cmd_mux cmd_mux_002 (
		.clk                 (peri_clk_clk_clk),                                    //       clk.clk
		.reset               (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                               //          .valid
		.src_data            (cmd_mux_002_src_data),                                //          .data
		.src_channel         (cmd_mux_002_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                              //          .channel
		.sink0_data          (cmd_demux_src2_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                           //          .endofpacket
	);

	c4e_pcmplay_core_mm_interconnect_1_cmd_mux cmd_mux_003 (
		.clk                 (peri_clk_clk_clk),                                    //       clk.clk
		.reset               (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                               //          .valid
		.src_data            (cmd_mux_003_src_data),                                //          .data
		.src_channel         (cmd_mux_003_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                              //          .channel
		.sink0_data          (cmd_demux_src3_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                           //          .endofpacket
	);

	c4e_pcmplay_core_mm_interconnect_1_cmd_mux cmd_mux_004 (
		.clk                 (peri_clk_clk_clk),                                    //       clk.clk
		.reset               (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                               //          .valid
		.src_data            (cmd_mux_004_src_data),                                //          .data
		.src_channel         (cmd_mux_004_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                              //          .channel
		.sink0_data          (cmd_demux_src4_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                           //          .endofpacket
	);

	c4e_pcmplay_core_mm_interconnect_1_cmd_mux cmd_mux_005 (
		.clk                 (peri_clk_clk_clk),                                    //       clk.clk
		.reset               (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                               //          .valid
		.src_data            (cmd_mux_005_src_data),                                //          .data
		.src_channel         (cmd_mux_005_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                              //          .channel
		.sink0_data          (cmd_demux_src5_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                           //          .endofpacket
	);

	c4e_pcmplay_core_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (peri_clk_clk_clk),                                    //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                //      sink.ready
		.sink_channel       (router_001_src_channel),                              //          .channel
		.sink_data          (router_001_src_data),                                 //          .data
		.sink_startofpacket (router_001_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_001_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                           //          .endofpacket
	);

	c4e_pcmplay_core_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (peri_clk_clk_clk),                                    //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                //      sink.ready
		.sink_channel       (router_002_src_channel),                              //          .channel
		.sink_data          (router_002_src_data),                                 //          .data
		.sink_startofpacket (router_002_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_002_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_001_src0_data),                             //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                       //          .endofpacket
	);

	c4e_pcmplay_core_mm_interconnect_1_rsp_demux rsp_demux_002 (
		.clk                (peri_clk_clk_clk),                                    //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                //      sink.ready
		.sink_channel       (router_003_src_channel),                              //          .channel
		.sink_data          (router_003_src_data),                                 //          .data
		.sink_startofpacket (router_003_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_003_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_002_src0_data),                             //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                       //          .endofpacket
	);

	c4e_pcmplay_core_mm_interconnect_1_rsp_demux rsp_demux_003 (
		.clk                (peri_clk_clk_clk),                                    //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                //      sink.ready
		.sink_channel       (router_004_src_channel),                              //          .channel
		.sink_data          (router_004_src_data),                                 //          .data
		.sink_startofpacket (router_004_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_004_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_003_src0_data),                             //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                       //          .endofpacket
	);

	c4e_pcmplay_core_mm_interconnect_1_rsp_demux rsp_demux_004 (
		.clk                (peri_clk_clk_clk),                                    //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                //      sink.ready
		.sink_channel       (router_005_src_channel),                              //          .channel
		.sink_data          (router_005_src_data),                                 //          .data
		.sink_startofpacket (router_005_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_005_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_004_src0_data),                             //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                       //          .endofpacket
	);

	c4e_pcmplay_core_mm_interconnect_1_rsp_demux rsp_demux_005 (
		.clk                (peri_clk_clk_clk),                                    //       clk.clk
		.reset              (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                //      sink.ready
		.sink_channel       (router_006_src_channel),                              //          .channel
		.sink_data          (router_006_src_data),                                 //          .data
		.sink_startofpacket (router_006_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_006_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_005_src0_data),                             //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                       //          .endofpacket
	);

	c4e_pcmplay_core_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (peri_clk_clk_clk),                                    //       clk.clk
		.reset               (peripheral_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                   //       src.ready
		.src_valid           (rsp_mux_src_valid),                                   //          .valid
		.src_data            (rsp_mux_src_data),                                    //          .data
		.src_channel         (rsp_mux_src_channel),                                 //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                              //          .channel
		.sink0_data          (rsp_demux_src0_data),                                 //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                          //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                            //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                            //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                          //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                             //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                      //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                            //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                            //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                          //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                             //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                      //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                            //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                            //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                          //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                             //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                    //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                      //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                            //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                            //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                          //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                             //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                    //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                      //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                            //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                            //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                          //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                             //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                    //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket)                       //          .endofpacket
	);

	c4e_pcmplay_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (peri_clk_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                        //         .error
	);

	c4e_pcmplay_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (peri_clk_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (vga_csr_agent_rdata_fifo_src_data),                   //     in_0.data
		.in_0_valid     (vga_csr_agent_rdata_fifo_src_valid),                  //         .valid
		.in_0_ready     (vga_csr_agent_rdata_fifo_src_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                    //         .error
	);

	c4e_pcmplay_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (peri_clk_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (systimer_s1_agent_rdata_fifo_src_data),               //     in_0.data
		.in_0_valid     (systimer_s1_agent_rdata_fifo_src_valid),              //         .valid
		.in_0_ready     (systimer_s1_agent_rdata_fifo_src_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                    //         .error
	);

	c4e_pcmplay_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (peri_clk_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (gpio_s1_agent_rdata_fifo_src_data),                   //     in_0.data
		.in_0_valid     (gpio_s1_agent_rdata_fifo_src_valid),                  //         .valid
		.in_0_ready     (gpio_s1_agent_rdata_fifo_src_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                    //         .error
	);

	c4e_pcmplay_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (peri_clk_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sysuart_s1_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (sysuart_s1_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (sysuart_s1_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                    //         .error
	);

	c4e_pcmplay_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (peri_clk_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (barcolor_s1_agent_rdata_fifo_src_data),               //     in_0.data
		.in_0_valid     (barcolor_s1_agent_rdata_fifo_src_valid),              //         .valid
		.in_0_ready     (barcolor_s1_agent_rdata_fifo_src_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                    //         .error
	);

endmodule
